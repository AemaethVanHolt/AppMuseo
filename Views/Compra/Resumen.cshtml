@model Dictionary<string, object>
@{
    ViewData["Title"] = "Resumen de Compra";
    
    var precioBase = (decimal)Model["PrecioBase"];
    var precioTotal = (decimal)Model["PrecioTotal"];
    var extrasDisponibles = Model["ExtrasDisponibles"] as Dictionary<string, decimal>;
    var extrasSeleccionados = Model["ExtrasSeleccionados"] as List<string> ?? new List<string>();
    
    // Diccionario para mapear los valores de los checkboxes a los nombres de los extras
    var extrasMap = new Dictionary<string, string>
    {
        { "Audioguía", "audioguia" },
        { "Visita Guiada", "visita" },
        { "Autorización Fotográfica", "foto" }
    };
}

<div class="resumen-compra-container">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card bg-dark text-white">
                <form asp-action="ConfirmarCompra" method="post" id="formularioCompra">
                    @Html.AntiForgeryToken()
                    <div class="card-body p-4">
                        <h1 class="card-title">Completa tu Compra</h1>
                        
                        <input type="hidden" name="tipoEntrada" value="@Model["TipoEntrada"]" />
                        <input type="hidden" name="precioUnitario" value="@Model["PrecioTotal"]" />
                        <input type="hidden" name="precio" value="@Model["PrecioTotal"]" />
                        <input type="hidden" id="extrasSeleccionados" name="extras" value="@Newtonsoft.Json.JsonConvert.SerializeObject(extrasSeleccionados)" />
                        
                        <!-- Detalles de la compra -->
                        <div class="resumen-compra">
                            <div class="resumen-header">
                                <div class="row align-items-center">
                                    <div class="col-md-8">
                                        <h4 class="mb-2">Resumen de tu compra</h4>
                                        <p class="mb-1">Tipo de entrada: <span class="text-warning fw-bold">@Model["TipoEntrada"]</span></p>
                                        <p class="mb-0">Precio base: <span class="text-warning">@precioBase.ToString("0.00") €</span></p>
                                    </div>
                                    <div class="col-md-4 text-md-end mt-3 mt-md-0">
                                        <div class="d-inline-block bg-dark p-3 rounded-3 border border-warning">
                                            <p class="mb-0 text-warning">Total a pagar:</p>
                                            <h3 class="mb-0 text-warning fw-bold">@precioTotal.ToString("0.00") €</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Sección de Fecha, Hora y Cantidad -->
                            <div class="fila-campos">
                                <div class="campo-grupo">
                                    <div class="row g-3">
                                        <!-- Fecha -->
                                        <div class="col-md-4">
                                            <label for="fechaVisita" class="form-label fw-medium">Fecha de visita</label>
                                            <div class="input-group">
                                                <input type="date" class="form-control" id="fechaVisita" name="fechaVisita" required>
                                            </div>
                                            <small class="text-muted">Martes a sábado</small>
                                        </div>
                                        
                                        <!-- Hora -->
                                        <div class="col-md-4">
                                            <label for="horaVisita" class="form-label fw-medium">Hora</label>
                                            <select class="form-select" id="horaVisita" name="horaVisita" required>
                                                <option value="">Selecciona hora</option>
                                                @for (int i = 10; i <= 20; i++)
                                                {
                                                    <option value="@($"{i:00}:00")">@($"{i:00}:00")</option>
                                                }
                                            </select>
                                            <small class="text-muted">10:00 - 20:00</small>
                                        </div>
                                        
                                        <!-- Cantidad -->
                                        <div class="col-md-4">
                                            <label for="cantidad" class="form-label fw-medium">Cantidad</label>
                                            <div class="d-flex align-items-center">
                                                <button type="button" class="btn btn-link p-0 me-2 text-warning" data-action="decrement" style="font-size: 1.5rem; width: 30px; height: 30px; line-height: 20px;">-</button>
                                                <input type="number" class="form-control text-center border-0 bg-transparent" id="cantidad" name="cantidad" min="1" max="10" value="1" required style="max-width: 60px;">
                                                <button type="button" class="btn btn-link p-0 ms-2 text-warning" data-action="increment" style="font-size: 1.5rem; width: 30px; height: 30px; line-height: 20px;">+</button>
                                            </div>
                                            <small class="text-muted">Máx. 10 entradas</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        
                        <!-- Sección de Extras -->
                        <div class="extras-simple mb-4">
                            <h5 class="text-warning mb-3">Extras</h5>
                            @if (extrasDisponibles != null)
                            {
                                foreach (var extra in extrasDisponibles)
                                {
                                    if (extra.Key == null) continue;
                                    var checkboxValue = extrasMap != null && extrasMap.ContainsKey(extra.Key) ? extrasMap[extra.Key] : extra.Key;
                                    var isChecked = extrasSeleccionados?.Contains(checkboxValue) ?? false;
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="extras" value="@checkboxValue" id="extra-@checkboxValue" data-precio="@extra.Value" @(isChecked ? "checked" : "")>
                                        <label class="form-check-label" for="extra-@checkboxValue">
                                            @extra.Key <span class="text-warning">+@extra.Value.ToString("0.00") €</span>
                                        </label>
                                    </div>
                                }
                            }
                        </div>
                        
                        <!-- Sección de Métodos de Pago -->
                        <div class="metodos-pago mt-4">
                            <h5 class="mb-3">Método de pago:</h5>
                            
                            <div class="d-grid gap-2 mb-4">
                                <button type="button" class="btn btn-warning btn-lg py-3" id="btnPagoTaquilla">
                                    <i class="fas fa-ticket-alt me-2"></i> Confirmar pago en taquilla
                                </button>
                                <p class="text-center text-muted">o selecciona otro método de pago</p>
                            </div>

                            <div class="accordion accordion-flush" id="metodosPagoAccordion">
                                <!-- Tarjeta -->
                                <div class="accordion-item bg-transparent border-warning mb-2">
                                    <h2 class="accordion-header" id="headingTarjeta">
                                        <button class="accordion-button bg-dark text-white collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#datosTarjeta" aria-expanded="false" aria-controls="datosTarjeta">
                                            <i class="fas fa-credit-card text-warning me-2"></i> Tarjeta de crédito/débito
                                        </button>
                                    </h2>
                                    <div id="datosTarjeta" class="accordion-collapse collapse" aria-labelledby="headingTarjeta" data-bs-parent="#metodosPagoAccordion">
                                        <div class="accordion-body">
                                            <div class="mb-3">
                                                <label for="numeroTarjeta" class="form-label">Número de tarjeta</label>
                                                <input type="text" class="form-control bg-dark text-white border-warning" id="numeroTarjeta" placeholder="1234 5678 9012 3456" required>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-6 mb-3">
                                                    <label for="fechaExpiracion" class="form-label">Fecha de expiración</label>
                                                    <input type="text" class="form-control bg-dark text-white border-warning" id="fechaExpiracion" placeholder="MM/AA" required>
                                                </div>
                                                <div class="col-md-6 mb-3">
                                                    <label for="cvv" class="form-label">CVV</label>
                                                    <input type="text" class="form-control bg-dark text-white border-warning" id="cvv" placeholder="123" required>
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="nombreTitular" class="form-label">Nombre del titular</label>
                                                <input type="text" class="form-control bg-dark text-white border-warning" id="nombreTitular" placeholder="Como aparece en la tarjeta" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Transferencia Bancaria -->
                                <div class="accordion-item bg-transparent border-warning mb-2">
                                    <h2 class="accordion-header" id="headingTransferencia">
                                        <button class="accordion-button bg-dark text-white collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#datosTransferencia" aria-expanded="false" aria-controls="datosTransferencia">
                                            <i class="fas fa-university text-warning me-2"></i> Transferencia bancaria
                                        </button>
                                    </h2>
                                    <div id="datosTransferencia" class="accordion-collapse collapse" aria-labelledby="headingTransferencia" data-bs-parent="#metodosPagoAccordion">
                                        <div class="accordion-body">
                                            <p>Realiza una transferencia a la siguiente cuenta bancaria:</p>
                                            <div class="bg-dark p-3 rounded border border-warning">
                                                <p class="mb-1"><strong>Banco:</strong> Banco Ejemplo</p>
                                                <p class="mb-1"><strong>Titular:</strong> Museo de Arte Contemporáneo</p>
                                                <p class="mb-1"><strong>IBAN:</strong> ES12 3456 7890 1234 5678 9012</p>
                                                <p class="mb-1"><strong>SWIFT/BIC:</strong> BNAGESMMXXX</p>
                                                <p class="mb-0"><strong>Concepto:</strong> Entrada @Model["TipoEntrada"] - [Tu nombre]</p>
                                            </div>
                                            <p class="mt-3">Una vez realizado el pago, envía el comprobante a <a href="mailto:reservas@museo.com" class="text-warning">reservas@museo.com</a></p>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- PayPal -->
                                <div class="accordion-item bg-transparent border-warning mb-2">
                                    <h2 class="accordion-header" id="headingPaypal">
                                        <button class="accordion-button bg-dark text-white collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#datosPaypal" aria-expanded="false" aria-controls="datosPaypal">
                                            <i class="fab fa-paypal text-warning me-2"></i> PayPal
                                        </button>
                                    </h2>
                                    <div id="datosPaypal" class="accordion-collapse collapse" aria-labelledby="headingPaypal" data-bs-parent="#metodosPagoAccordion">
                                        <div class="accordion-body">
                                            <p>Serás redirigido a la plataforma segura de PayPal para completar tu pago.</p>
                                            <button type="button" class="btn btn-warning w-100">
                                                <i class="fab fa-paypal me-2"></i>Pagar con PayPal
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Bizum -->
                                <div class="accordion-item bg-transparent border-warning mb-2">
                                    <h2 class="accordion-header" id="headingBizum">
                                        <button class="accordion-button bg-dark text-white collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#datosBizum" aria-expanded="false" aria-controls="datosBizum">
                                            <i class="fas fa-mobile-alt text-warning me-2"></i> Bizum
                                        </button>
                                    </h2>
                                    <div id="datosBizum" class="accordion-collapse collapse" aria-labelledby="headingBizum" data-bs-parent="#metodosPagoAccordion">
                                        <div class="accordion-body">
                                            <p>Paga de forma rápida y segura con Bizum.</p>
                                            <div class="mb-3">
                                                <label for="telefonoBizum" class="form-label">Número de teléfono</label>
                                                <div class="input-group">
                                                    <span class="input-group-text bg-dark text-white border-warning">+34</span>
                                                    <input type="tel" class="form-control bg-dark text-white border-warning" id="telefonoBizum" placeholder="600 000 000" pattern="[0-9]{9}" required>
                                                </div>
                                                <small class="form-text text-muted">Introduce tu número de teléfono asociado a Bizum</small>
                                            </div>
                                            <button type="button" class="btn btn-warning w-100">
                                                <i class="fas fa-mobile-alt me-2"></i>Pagar con Bizum
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Pago en Taquilla -->
                                <div class="accordion-item bg-transparent border-warning">
                                    <h2 class="accordion-header" id="headingTaquilla">
                                        <button class="accordion-button bg-dark text-white collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#datosTaquilla" aria-expanded="false" aria-controls="datosTaquilla">
                                            <i class="fas fa-ticket-alt text-warning me-2"></i> Pago en Taquilla
                                        </button>
                                    </h2>
                                    <div id="datosTaquilla" class="accordion-collapse collapse" aria-labelledby="headingTaquilla" data-bs-parent="#metodosPagoAccordion">
                                        <div class="accordion-body">
                                            <p>Puedes pagar directamente en taquilla al recoger tus entradas.</p>
                                            <p class="mb-0"><i class="fas fa-info-circle text-warning me-2"></i>Las entradas se reservarán por 24 horas.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Desglose de precios -->
                        <div class="bg-dark p-3 rounded border border-warning mb-4">
                            <h5 class="text-warning mb-3">Resumen de tu compra</h5>
                            
                            <div class="d-flex justify-content-between mb-2">
                                <span>Tipo de entrada: @Model["TipoEntrada"]</span>
                                <span>@precioBase.ToString("0.00") €</span>
                            </div>
                            
                            <div class="d-flex justify-content-between mb-2">
                                <span>Precio base (<span id="cantidad-entradas">1</span> x @precioBase.ToString("0.00") €):</span>
                                <span id="precio-base">@precioBase.ToString("0.00") €</span>
                            </div>
                            
                            <div class="d-flex justify-content-between mb-2">
                                <span>Extras:</span>
                                <span id="total-extras">0,00 €</span>
                            </div>
                            
                            <hr class="border-warning my-3">
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">Total a pagar:</h5>
                                <h4 class="text-warning mb-0" id="total-pagar">@precioBase.ToString("0.00") €</h4>
                            </div>
                        </div>
                        
                        <!-- Botones de acción -->
                        <div class="d-flex justify-content-between mt-4">
                            <a href="/Taquilla" class="btn btn-outline-warning">
                                <i class="fas fa-arrow-left me-2"></i>Volver
                            </a>
                            <button type="submit" class="btn btn-warning">
                                <i class="fas fa-check me-2"></i>Confirmar Compra
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmación -->
<div class="modal fade" id="confirmacionModal" tabindex="-1" aria-labelledby="confirmacionModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-warning">
                <h5 class="modal-title" id="confirmacionModalLabel">Confirmar Compra</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas confirmar tu compra?</p>
                <div class="mt-3">
                    <p class="mb-1">Tipo de entrada: <span class="text-warning" id="modalTipoEntrada"></span></p>
                    <p class="mb-1">Cantidad: <span class="text-warning" id="modalCantidad"></span></p>
                    <p class="mb-1">Extras: <span class="text-warning" id="modalExtras"></span></p>
                    <p class="mb-1">Total: <span class="text-warning fw-bold" id="modalTotal"></span></p>
                </div>
            </div>
            <div class="modal-footer border-warning">
                <button type="button" class="btn btn-outline-light" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" id="btnConfirmarCompra">Confirmar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Precios
            const precios = {
                entrada: @precioBase, // Precio base de la entrada
                foto: 3.00,
                guia: 5.00,
                tienda: 2.00
            };

            // Elementos del DOM
            const cantidadInput = document.getElementById('cantidad');
            const checkboxes = document.querySelectorAll('input[type="checkbox"][name="extras"]');
            const totalElement = document.getElementById('total-pagar');
            const precioBaseElement = document.getElementById('precio-base');
            const totalExtrasElement = document.getElementById('total-extras');

            // Función para formatear moneda
            function formatCurrency(amount) {
                return amount.toFixed(2).replace('.', ',') + ' €';
            }

            // Función para calcular el total
            function calcularTotal() {
                const cantidad = parseInt(cantidadInput.value) || 1;
                let totalExtras = 0;
                
                // Actualizar la cantidad de entradas en el resumen
                const cantidadEntradasElement = document.getElementById('cantidad-entradas');
                if (cantidadEntradasElement) {
                    cantidadEntradasElement.textContent = cantidad;
                }
                
                // Sumar extras seleccionados
                const extrasSeleccionados = [];
                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        totalExtras += precios[checkbox.value];
                        extrasSeleccionados.push(checkbox.value);
                    }
                });
                
                // Calcular totales
                const subtotalEntrada = precios.entrada * cantidad;
                const subtotalExtras = totalExtras * cantidad;
                const total = subtotalEntrada + subtotalExtras;
                
                // Actualizar la interfaz
                if (precioBaseElement) {
                    precioBaseElement.textContent = formatCurrency(subtotalEntrada);
                }
                
                if (totalExtrasElement) {
                    totalExtrasElement.textContent = formatCurrency(subtotalExtras);
                }
                
                if (totalElement) {
                    totalElement.textContent = formatCurrency(total);
                }
                
                // Actualizar campos ocultos del formulario
                document.querySelector('input[name="cantidad"]').value = cantidad;
                document.querySelector('input[name="precio"]').value = total.toFixed(2);
                document.querySelector('input[name="precioUnitario"]').value = (total / cantidad).toFixed(2);
                
                // Actualizar extras en el formulario
                const extrasInput = document.createElement('input');
                extrasInput.type = 'hidden';
                extrasInput.name = 'extras';
                extrasInput.value = JSON.stringify(extrasSeleccionados);
                
                // Eliminar inputs de extras anteriores
                document.querySelectorAll('input[name="extras"]').forEach(input => input.remove());
                
                // Agregar el nuevo input de extras
                document.getElementById('formularioCompra').appendChild(extrasInput);
            }

            // Función para manejar el incremento/decremento
            function handleQuantityChange(action) {
                let value = parseInt(cantidadInput.value) || 1;
                
                if (action === 'increment' && value < 10) {
                    value++;
                } else if (action === 'decrement' && value > 1) {
                    value--;
                }
                
                cantidadInput.value = value;
                calcularTotal();
                
                // Disparar evento de cambio
                const event = new Event('change');
                cantidadInput.dispatchEvent(event);
            }

            // Asignar manejadores de eventos
            document.querySelector('[data-action="increment"]').addEventListener('click', function() {
                handleQuantityChange('increment');
            });

            document.querySelector('[data-action="decrement"]').addEventListener('click', function() {
                handleQuantityChange('decrement');
            });

            // Validar entrada manual
            cantidadInput.addEventListener('change', function() {
                let value = parseInt(this.value) || 1;
                if (value < 1) value = 1;
                if (value > 10) value = 10;
                this.value = value;
                calcularTotal();
            });

            // Escuchar cambios en los checkboxes de extras
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', calcularTotal);
            });

            // Configurar la fecha mínima (hoy)
            const hoy = new Date().toISOString().split('T')[0];
            document.getElementById('fechaVisita').min = hoy;
            
            // Inicializar el cálculo del total
            calcularTotal();
            
            // Manejar cambios en los checkboxes de extras
            const checkboxesExtras = document.querySelectorAll('input[name="extras"]');
            checkboxesExtras.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    // Actualizar el array de extras seleccionados
                    const selectedExtras = [];
                    checkboxesExtras.forEach(cb => {
                        if (cb.checked) {
                            selectedExtras.push(cb.value);
                        }
                    });
                    
                    // Actualizar el campo oculto de extras
                    document.getElementById('extrasSeleccionados').value = JSON.stringify(selectedExtras);
                    
                    // Recalcular el total
                    calcularTotal();
                });
            });
            
            function calcularTotal() {
                const cantidad = parseInt(document.getElementById('cantidad').value) || 1;
                const precioBase = @precioBase;
                let total = precioBase * cantidad;
                let subtotalExtras = 0;
                
                // Calcular subtotal de extras
                document.querySelectorAll('input[name="extras"]:checked').forEach(extra => {
                    const precioExtra = parseFloat(extra.getAttribute('data-precio') || '0');
                    subtotalExtras += precioExtra * cantidad;
                });
                
                // Calcular total general
                total += subtotalExtras;
                
                // Actualizar el desglose de precios
                document.getElementById('cantidad-entradas').textContent = cantidad;
                document.getElementById('precio-base').textContent = (precioBase * cantidad).toFixed(2) + ' €';
                document.getElementById('total-extras').textContent = subtotalExtras.toFixed(2) + ' €';
                document.getElementById('total-pagar').textContent = total.toFixed(2) + ' €';
                
                // Actualizar los campos ocultos
                const precioTotalInput = document.querySelector('input[name="precioTotal"]');
                if (precioTotalInput) {
                    precioTotalInput.value = total.toFixed(2);
                }
                
                const precioInput = document.querySelector('input[name="precio"]');
                if (precioInput) {
                    precioInput.value = total.toFixed(2);
                }
                
                // Actualizar el campo oculto de extras
                const selectedExtras = [];
                document.querySelectorAll('input[name="extras"]:checked').forEach(checkbox => {
                    selectedExtras.push(checkbox.value);
                });
                
                const extrasSeleccionadosInput = document.getElementById('extrasSeleccionados');
                if (extrasSeleccionadosInput) {
                    extrasSeleccionadosInput.value = JSON.stringify(selectedExtras);
                }
            }
        });
    </script>
    <!-- Bootstrap Datepicker JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/locales/bootstrap-datepicker.es.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-timepicker/0.5.2/js/bootstrap-timepicker.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Funcionalidad para los botones de incremento/decremento
            document.querySelectorAll('[data-action="increment"], [data-action="decrement"]').forEach(button => {
                button.addEventListener('click', function() {
                    const action = this.getAttribute('data-action');
                    const cantidadInput = document.getElementById('cantidad');
                    let cantidad = parseInt(cantidadInput.value) || 1;
                    
                    if (action === 'increment' && cantidad < 10) {
                        cantidad++;
                    } else if (action === 'decrement' && cantidad > 1) {
                        cantidad--;
                    }
                    
                    cantidadInput.value = cantidad;
                    actualizarPrecioTotal();
                    
                    // Deshabilitar botón de decremento si llegamos al mínimo
                    const decrementBtn = document.querySelector('[data-action="decrement"]');
                    if (cantidad <= 1) {
                        decrementBtn.classList.add('text-muted');
                        decrementBtn.style.cursor = 'not-allowed';
                    } else {
                        decrementBtn.classList.remove('text-muted');
                        decrementBtn.style.cursor = 'pointer';
                    }
                    
                    // Deshabilitar botón de incremento si llegamos al máximo
                    const incrementBtn = document.querySelector('[data-action="increment"]');
                    if (cantidad >= 10) {
                        incrementBtn.classList.add('text-muted');
                        incrementBtn.style.cursor = 'not-allowed';
                    } else {
                        incrementBtn.classList.remove('text-muted');
                        incrementBtn.style.cursor = 'pointer';
                    }
                });
            });
            
            // Validar manualmente la entrada del usuario
            const cantidadInput = document.getElementById('cantidad');
            if (cantidadInput) {
                // Configurar estado inicial de los botones
                const decrementBtn = document.querySelector('[data-action="decrement"]');
                const incrementBtn = document.querySelector('[data-action="increment"]');
                
                // Estado inicial del botón de decremento
                if (parseInt(cantidadInput.value) <= 1) {
                    decrementBtn.classList.add('text-muted');
                    decrementBtn.style.cursor = 'not-allowed';
                }
                
                // Estado inicial del botón de incremento
                if (parseInt(cantidadInput.value) >= 10) {
                    incrementBtn.classList.add('text-muted');
                    incrementBtn.style.cursor = 'not-allowed';
                }
                
                cantidadInput.addEventListener('change', function() {
                    let value = parseInt(this.value) || 1;
                    if (value < 1) value = 1;
                    if (value > 10) value = 10;
                    this.value = value;
                    actualizarPrecioTotal();
                    
                    // Actualizar estado de los botones
                    if (value <= 1) {
                        decrementBtn.classList.add('text-muted');
                        decrementBtn.style.cursor = 'not-allowed';
                    } else {
                        decrementBtn.classList.remove('text-muted');
                        decrementBtn.style.cursor = 'pointer';
                    }
                    
                    if (value >= 10) {
                        incrementBtn.classList.add('text-muted');
                        incrementBtn.style.cursor = 'not-allowed';
                    } else {
                        incrementBtn.classList.remove('text-muted');
                        incrementBtn.style.cursor = 'pointer';
                    }
                });
            }
            // Inicializar el datepicker con estilos personalizados
            $('#datepicker').datepicker({
                format: 'dd/mm/yyyy',
                language: 'es',
                autoclose: true,
                todayHighlight: true,
                startDate: '0d',
                endDate: '+1y',
                daysOfWeekDisabled: '0', // Deshabilitar domingos
                datesDisabled: ['01/01/2025', '06/01/2025', '01/05/2025', '15/08/2025', '12/10/2025', '01/11/2025', '06/12/2025', '08/12/2025', '25/12/2025'],
                orientation: 'bottom',
                container: '.datepicker-container',
                templates: {
                    leftArrow: '<i class="fas fa-chevron-left"></i>',
                    rightArrow: '<i class="fas fa-chevron-right"></i>'
                }
            }).on('show', function(e) {
                // Asegurar que el datepicker se muestre correctamente
                $('.datepicker').addClass('datepicker-theme-dark');
            });

            // Inicializar el timepicker
            $('#timepicker').timepicker({
                minuteStep: 30,
                showMeridian: false,
                showInputs: false,
                disableFocus: true,
                defaultTime: '10:00',
                minTime: '10:00',
                maxTime: '19:30',
                explicitMode: true,
                modalBackdrop: true
            });
            
            // Aplicar estilos al timepicker
            $('.bootstrap-timepicker-widget').addClass('timepicker-theme-dark');
            
            // Establecer la fecha mínima como hoy
            var today = new Date();
            var dd = String(today.getDate()).padStart(2, '0');
            var mm = String(today.getMonth() + 1).padStart(2, '0');
            var yyyy = today.getFullYear();
            today = dd + '/' + mm + '/' + yyyy;
            $('#fechaVisita').val(today);
            
            // Establecer la hora predeterminada
            $('#horaVisita').val('10:00');
            // Manejador para el botón de pago en taquilla
            const btnPagoTaquilla = document.getElementById('btnPagoTaquilla');
            if (btnPagoTaquilla) {
                btnPagoTaquilla.addEventListener('click', function() {
                    // Agregar un campo oculto para indicar que es pago en taquilla
                    let inputPagoTaquilla = document.createElement('input');
                    inputPagoTaquilla.type = 'hidden';
                    inputPagoTaquilla.name = 'metodoPago';
                    inputPagoTaquilla.value = 'taquilla';
                    document.getElementById('formularioCompra').appendChild(inputPagoTaquilla);
                    
                    // Enviar el formulario
                    document.getElementById('formularioCompra').submit();
                });
            }

            // Inicializar variables globales para el cálculo del total
            window.precioBase = @precioBase;
            window.preciosExtras = {
                'audioguia': 2.50,
                'visita': 4.00,
                'foto': 1.50
            };

            // Función para formatear el precio
            function formatearPrecio(precio) {
                return new Intl.NumberFormat('es-ES', { 
                    style: 'currency', 
                    currency: 'EUR',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2 
                }).format(precio);
            }

            // Función para actualizar el precio total
            function actualizarPrecioTotal() {
                const form = document.getElementById('formularioCompra');
                if (!form) return;
                
                // Obtener la cantidad
                const cantidadInput = form.querySelector('input[name="cantidad"]');
                let cantidad = 1;
                if (cantidadInput && cantidadInput.value) {
                    cantidad = parseInt(cantidadInput.value) || 1;
                    if (cantidad < 1) cantidad = 1;
                }
                
                // Calcular el subtotal de las entradas
                const subtotalEntradas = window.precioBase * cantidad;
                
                // Calcular el subtotal de los extras
                let subtotalExtras = 0;
                const checkboxes = form.querySelectorAll('input[type="checkbox"][name="extras"]:checked');
                checkboxes.forEach(checkbox => {
                    const precio = parseFloat(checkbox.dataset.precio) || 0;
                    subtotalExtras += precio * cantidad;
                });
                
                // Calcular el total
                const total = subtotalEntradas + subtotalExtras;
                
                // Actualizar el total en la interfaz
                const totalElement = document.getElementById('total');
                if (totalElement) {
                    totalElement.textContent = formatearPrecio(total);
                }
                
                // Actualizar el campo oculto del total
                const precioTotalInput = form.querySelector('input[name="precioTotal"]');
                if (!precioTotalInput) {
                    const newInput = document.createElement('input');
                    newInput.type = 'hidden';
                    newInput.name = 'precioTotal';
                    form.appendChild(newInput);
                } else {
                    precioTotalInput.value = total.toFixed(2);
                }
                
                return total;
            }
            
            // Inicializar eventos
            const form = document.getElementById('formularioCompra');
            if (form) {
                // Evento para el cambio en la cantidad
                const cantidadInput = document.getElementById('cantidad');
                if (cantidadInput) {
                    cantidadInput.addEventListener('change', function() {
                        // Asegurar que el valor esté dentro de los límites
                        let value = parseInt(this.value) || 1;
                        if (value < 1) value = 1;
                        if (value > 10) value = 10;
                        this.value = value;
                        
                        // Actualizar el total
                        actualizarPrecioTotal();
                    });
                    cantidadInput.addEventListener('input', actualizarPrecioTotal);
                }
                
                // Evento para los checkboxes de extras
                const checkboxes = form.querySelectorAll('input[type="checkbox"][name="extras"]');
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', actualizarPrecioTotal);
                });
                
                // Evento para el envío del formulario
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    // Actualizar el modal de confirmación
                    const modalTipoEntrada = document.getElementById('modalTipoEntrada');
                    const modalCantidad = document.getElementById('modalCantidad');
                    const modalExtras = document.getElementById('modalExtras');
                    const modalTotal = document.getElementById('modalTotal');
                    
                    if (modalTipoEntrada) modalTipoEntrada.textContent = '@Model["TipoEntrada"]';
                    if (modalCantidad) modalCantidad.textContent = cantidadInput ? cantidadInput.value : '1';
                    
                    // Obtener los extras seleccionados
                    const extrasSeleccionados = [];
                    checkboxes.forEach(checkbox => {
                        if (checkbox.checked) {
                            const label = form.querySelector(`label[for="${checkbox.id}"]`);
                            if (label) {
                                extrasSeleccionados.push(label.textContent.trim().split(' ')[0]);
                            }
                        }
                    });
                    
                    if (modalExtras) {
                        modalExtras.textContent = extrasSeleccionados.length > 0 
                            ? extrasSeleccionados.join(', ') 
                            : 'Ninguno';
                    }
                    
                    if (modalTotal) {
                        const total = actualizarPrecioTotal();
                        modalTotal.textContent = formatearPrecio(total);
                    }
                    
                    // Mostrar el modal de confirmación
                    const modal = new bootstrap.Modal(document.getElementById('confirmacionModal'));
                    modal.show();
                    
                    // Configurar el botón de confirmación
                    const btnConfirmar = document.getElementById('btnConfirmarCompra');
                    if (btnConfirmar) {
                        btnConfirmar.onclick = function() {
                            form.submit();
                        };
                    }
                });
            }
            
            // Calcular el total inicial
            actualizarPrecioTotal();
        });
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/compra-resumen.css" asp-append-version="true" />
    <!-- Bootstrap Datepicker CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
    <!-- Bootstrap Timepicker CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-timepicker/0.5.2/css/bootstrap-timepicker.min.css">
}
