@model IEnumerable<AppMuseo.Models.Entrada>

@{
    ViewData["Title"] = "Gestión de Ventas";
    Layout = "_Layout";
    ViewData["CurrentPage"] = "Ventas";
}

@section Styles {
    <link rel="stylesheet" href="~/css/ventas.css" />
    <style>
        .chart-container {
            position: relative;
            height: 350px;
            margin-bottom: 2rem;
        }
        .chart-card {
            background-color: #2c3034;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);
            margin-bottom: 2rem;
        }
        .chart-title {
            color: #ffffff;
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
            font-weight: 600;
        }
    </style>
}

<div class="ventas-container">
    <div class="container py-4">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Resumen de ventas -->
        <div class="resumen-ventas mb-4 p-4" style="background-color: #2c3034; border-radius: 0.5rem; box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);">
            <div class="row align-items-center">
                <div class="col-md-6 text-center text-md-start">
                    <h3 class="mb-0" style="color: #ffffff; font-size: 1.5rem; font-weight: 600;">
                        Total de ventas: <span class="text-warning">@Model.Count()</span>
                    </h3>
                </div>
                <div class="col-md-6 text-center text-md-end">
                    <h3 class="mb-0" style="color: #ffffff; font-size: 1.5rem; font-weight: 600;">
                        Total recaudado: <span style="color: #FFD700;">@Model.Sum(e => e.Precio).ToString("N2") €</span>
                    </h3>
                </div>
            </div>
        </div>

        <!-- Gráfico de ventas -->
        <div class="chart-card">
            <h3 class="chart-title">Distribución de Ventas por Tipo de Entrada</h3>
            <div class="chart-container">
                <canvas id="ventasChart"></canvas>
            </div>
        </div>

    <div class="ventas-card card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h2 class="h5 mb-0">@ViewData["Title"]</h2>
                    <button type="button" onclick="window.history.back()" class="btn btn-volver">
                        <i class="fas fa-arrow-left me-1"></i> VOLVER
                    </button>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <form asp-action="Index" method="get" class="mb-0">
                            <div class="input-group">
                                <select name="filtroTipo" class="form-select" onchange="this.form.submit()">
                                    @if (ViewBag.Filtros is List<SelectListItem> filtros && filtros.Any())
                                    {
                                        foreach (var filtro in filtros)
                                        {
                                            <!option value="@filtro.Value" @(filtro.Value == ViewBag.FiltroSeleccionado ? "selected" : "")>@filtro.Text</!option>
                                        }
                                    }
                                </select>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-filter me-1"></i> FILTRAR
                                </button>
                                @if (!string.IsNullOrEmpty(ViewBag.FiltroSeleccionado))
                                {
                                    <a asp-action="Index" class="btn btn-secondary">
                                        <i class="fas fa-times me-1"></i> LIMPIAR
                                    </a>
                                }
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="ventas-table table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Fecha</th>
                                <th>Hora</th>
                                <th>Cliente</th>
                                <th>Tipo</th>
                                <th class="text-center">Cantidad</th>
                                <th class="text-end">Total</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>@($"{item.Hora.Hours:00}:{item.Hora.Minutes:00}")</td>
                                    <td>@(item.User?.Email ?? "Usuario eliminado")</td>
                                    <td>@item.TipoEntrada</td>
                                    <td class="text-center">1</td>
                                    <td class="text-end fw-bold">@item.Total.ToString("C2")</td>
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-action" title="VER DETALLES">
                                            <i class="fas fa-eye"></i> DETALLES
                                        </a>
                                    </td>
                                </tr>
                            }
                            @if (!Model.Any())
                            {
                                <tr>
                                    <td colspan="7" class="text-center py-4">
                                        <div class="text-muted">No se encontraron ventas registradas</div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="ventas-count">
                        Total de ventas: <strong>@Model.Count()</strong>
                    </div>
                    <div class="ventas-total">
                        Total recaudado: <span class="text-success">@Model.Sum(e => e.Total).ToString("C2")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Datos para el gráfico
        const labels = @Html.Raw(Json.Serialize(ViewBag.Labels));
        const cantidades = @Html.Raw(Json.Serialize(ViewBag.Cantidades));
        const totales = @Html.Raw(Json.Serialize(ViewBag.Totales));

        // Colores para el gráfico
        const backgroundColors = [
            'rgba(255, 215, 0, 0.7)',
            'rgba(54, 162, 235, 0.7)',
            'rgba(75, 192, 192, 0.7)',
            'rgba(255, 99, 132, 0.7)',
            'rgba(153, 102, 255, 0.7)'
        ];

        const borderColors = [
            'rgba(255, 215, 0, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(255, 99, 132, 1)',
            'rgba(153, 102, 255, 1)'
        ];

        // Configuración del gráfico
        const ctx = document.getElementById('ventasChart').getContext('2d');
        const ventasChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Cantidad de Ventas',
                    barThickness: 30, // Ancho fijo para cada barra
                    maxBarThickness: 40, // Ancho máximo
                    categoryPercentage: 0.5, // Porcentaje del ancho de categoría que deben ocupar las barras
                    barPercentage: 0.8, // Porcentaje del espacio disponible que deben ocupar las barras
                    data: cantidades,
                    backgroundColor: backgroundColors,
                    borderColor: borderColors,
                    borderWidth: 1,
                    yAxisID: 'y'
                }, {
                    label: 'Total Recaudado (€)',
                    data: totales,
                    type: 'line',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.1)',
                    borderWidth: 2,
                    pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                    pointBorderColor: '#fff',
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: 'rgba(255, 99, 132, 1)',
                    pointHoverBorderColor: '#fff',
                    pointHitRadius: 10,
                    pointBorderWidth: 2,
                    yAxisID: 'y1'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 10,
                        top: 0,
                        bottom: 0
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            color: '#ffffff',
                            font: {
                                size: 12
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        borderColor: '#ffd700',
                        borderWidth: 1,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    if (context.datasetIndex === 0) {
                                        label += context.parsed.y + ' ventas';
                                    } else {
                                        label += context.parsed.y.toFixed(2) + ' €';
                                    }
                                }
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#ffffff'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Cantidad de Ventas',
                            color: '#ffffff'
                        },
                        ticks: {
                            color: '#ffffff',
                            stepSize: 1
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Total Recaudado (€)',
                            color: '#ffffff'
                        },
                        ticks: {
                            color: '#ffffff',
                            callback: function(value) {
                                return value + ' €';
                            }
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });

        // Scripts existentes...
    </script>
}
